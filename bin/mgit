#!/bin/sh
# vim: ts=2 sts=2 sw=2 expandtab
# Created: Tue Nov  6 10:47:19 MYT 2012

. `dirname $0`/common.sh

me=`basename $0`
usage() {
cat <<EOF
NAME
  $me - Run git commands for each git repositories under current directory

PURPOSE
  Run git command on multiple git repositories and format the
  output as if they come from a single repository (using the -p
  option) - works good only for ls-files.

SYNOPSIS
  $me [-cdehpqv] <git args>

OPTIONS
  -c
    pass -c ui.color=always to git
  -d <dir1,dir2,...>
    Run git command in <dir1,dir2,...> only
  -e <cmd>
    Run <cmd> instead of git
  -p
    Prepend dirname of git repo foreach line of output
  -v
    Be verbose - show directory being worked on
  -h
    Show this help message
EOF
}

dirs=
cmd=git
verbose=
add_prefix=
color_always=
while getopts cd:ehpv opt
do
  case "$opt" in
    c) color_always="-c color.ui=always";;
    d) dirs=`echo $OPTARG|tr , ' '|sed -e 's,$,/.git,' -e 's, ,/.git ,g'`;;
    e) cmd=$OPTARG;;
    p) add_prefix=t;;
    v) verbose=t;;
    h) usage ; exit;;
    \?) echo Unknown option ; exit;;
  esac
done
shift $(($OPTIND -1))

ngits=0
if [ -n "$dirs" ]; then
  git_dirs=$dirs
else
  if [ -f .mgit ]; then
    dirs=`cat .mgit`
    test -z "$dirs" && { echo "No dirs defined in .mgit"; exit 1; }
    git_dirs=$dirs
    #git_dirs=`find . -maxdepth 2 -type d -name .git|sed -e 's,./,,'`
    ngits=`echo $git_dirs|wc -w`
  fi
  if [ $ngits -le 1 ]; then
    exec git "$@";
  elif [ $ngits -gt 1 ]; then
    export MGIT_MODE=true
  fi
fi

odir=
fname_start_pattern="^\([^m]\+m\)\{0,1\}"
for gitdir in $git_dirs; do
(
  dir=$gitdir
  # GIT_DIR has to be fullpath for git svn rebase to work
  export GIT_DIR=$PWD/$gitdir/.git GIT_WORK_TREE=$PWD/$dir
  # echo GIT_DIR=$GIT_DIR GIT_WORK_TREE=$GIT_WORK_TREE
  test -n "$verbose" && echo $lightblue$dir$reset
  test -z "$1" && continue
  if [ "$1" = "stash" -o "$1" = "pronto" ]; then
    (cd $gitdir && git $color_always "$@")
  else
    if [ "$cmd" != git ]; then
      odir=`pwd`
      cd $GIT_WORK_TREE
    fi
    if [ -n "$add_prefix" ]; then
      $cmd $color_always "$@"|sed -e "s=$fname_start_pattern=\1$dir/=";
    else
      $cmd $color_always "$@"
    fi
    if [ "$cmd" != git ]; then
      cd $odir
    fi
  fi
)
done
